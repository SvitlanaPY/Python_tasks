# Doctest - бібліотека для тестування документації.
# доктести саме так називаються, бо пишуться в docstring-ах
# доктест виконує напряму код із docstring """<code>"""
# доктести дуже схожі на вивід у Python Console:
# >>> sum([1, 2, 3])
# 6
# У першому рядку зазвичай пишеться короткий опис того, що робить наша функція/код
# далі, більш детально описуємо що робить наш код
# після сотаннього тесту має бути пробіл!!!,
# інакше доктест буде вважати, що все, що після - це те, що ми очікуємо як повернення від ф-ії


def hyp(a: int, b: int) -> float:
    """ Шукає гіпотенузу по даних катетах
    >>> hyp(3, 4)
    5.0
    >>> hyp(5, 12)
    13

    Використовуючи формулу с ** 2 = (a ** 2 + b ** 2) ** 0.5
    :param a: катет1, може бути тільки int
    :param b: катет2, може бути тільки int
    :return: гіпотенуза, float
    """
    hyp = (a ** 2 + b ** 2) ** 0.5
    return hyp

# самий простий спосіб почати використовувати доктести - завершувати модуль doctest_.py блоком:
# if __name__ == "__main__":
#     import doctest
#     doctest.testmod()
# і запускати модуль самостійно з menu Run -> Run в PyCharm-i, чи командою python3 doctest_.py в командній стрічці в терміналі:
# doctest буде виконувати перевіряти строки документації в модулі doctest_.py
# __name__ == "__main__".
# Доктест, якщо він не ламається, то він нічого не виводить у терміналі;
# він дасть про себе знати тоді, коли щось поламається.
# Якщо скріпт запустити з аргументом -v, то виведеться детальний лог про всі тести, тобто: python3 doctest_.py -v
# Можна також примусово включити детальний вивід, передавши verbose = True в testmod()
# і тоді в терміналі вже заупскати без аргумента -v: python3 doctest_.py
#
# Починаючи з Python2.6 зявилось скорочення для командної стрічки для запуску testmod():
# в командній стрічці із стандартної бібліотеки треба передати модулю doctest (-m doctest) ім"я модуля з тестами (doctest_.py) як аргумент:
# ~$ python3 -m doctest -v doctest_.py
# Така команда імпортує doctest_.py як окремий модуль і запустить для нього testmod():
# __name__= doctest_
# аргумент -v виведе у консоль детальний лог того, що робить доктест.
# для збереження/виводу результатів виконання доктестів у файл використовується команда:  > DocTests_TestingResults.txt
# і тоді результати доктестів виведуться у файл DocTests_TestingResults.txt

# Директиви у доктестах - це спеціальні Python-коментарі, які пишуться одразу за кодом тесту в докстрінгах;
# вони змінюють поведінку для конкретного тесту/прикладу.
# Директиви з опціями можуть також передаватись як параметри функціям, які запускають доктисти, а саме doctest.testmod().
# У докстрінгах у якості очікуваного результату можна вказувати ексепшин, і
# щоб тектс в ексепшині НЕ брався до уваги, існує спеціальна опція IGNORE_EXCEPTION_DETAIL
# тому в ZeroDivisionError ексепшині текст в першому тесті НЕ береться до уваги,
# а другий тест валиться, бо очікуваний текст (Tru-la-la) в ZeroDivisionError ексепшині не співпадає з отриманим (ZeroDivisionError: division by zero)
def div(c: int, d: int) -> float:
    """
    >>> div(10, 0) # doctest: +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
        ...
    ZeroDivisionError: Bla-bla-bla
    >>> div(20, 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: Tru-la-la

    :param c: first value, int/float
    :param d: second value, int/float
    :return: division of values, float/Exception
    """

    return round((c / d), 2)



if __name__ == "__main__":
    import doctest
    doctest.testmod(verbose=True)


print("__name__=", __name__)

# print(hyp.__doc__)
# print(help(hyp))
