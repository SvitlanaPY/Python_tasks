# змінювані об"єкти в аргументів по замовчуванню
# хороша практика при використанні змінюваних об"єктів (списки, словники) як дефолтних аогументів,
# присвоювати їм дефолтне значення None і додавати перевірку if my_list is None: my_list = []

def append_to_list(value, my_list=None):
    if my_list is None:
        my_list = []
    my_list.append(value)
    print(my_list, id(my_list))


append_to_list(77)
append_to_list(88)
append_to_list(99)
append_to_list(100, [1, 2, 3])
# кожного разу створюється окремий порожній список, в який записується передане значення
# [77] 139795390673792
# [88] 139795390673792
# [99] 139795390673792
# [1, 2, 3, 100] 139795390673792


# НЕ вірно:
# def append_to_list(value, my_list=[10]):
#     my_list.append(value)
#     print(my_list, id(my_list))
# append_to_list(77)
# append_to_list(88)
# append_to_list(99)
# append_to_list(100, [1, 2, 3])   # інша ячейка памяті
# значення в списку накопичуються, бо використовується одне і те ж посилання на обєкт
# [10, 77] 139835303244672
# [10, 77, 88] 139835303244672
# [10, 77, 88, 99] 139835303244672
# [1, 2, 3, 100] 139835302893248
