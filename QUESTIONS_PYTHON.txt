Python:
24.Python — мова, що інтерпретується чи компілюється?
25.Які є змінні та незмінні типи даних?
26.Що таке область видимості змінних?
27.Що таке introspection?
28.Різниця між is і ==?
29.Різниця між __init__() і __new__()?
30.У чому різниця між потоками та процесами?
31.Які є види імпорту?
32.Що таке клас, ітератор, генератор?
33.Що таке метаклас, змінна циклу?
34.У чому різниця між ітераторами та генераторами?
35.У чому різниця між staticmethod та classmethod?
36.Як працюють декоратори, контекстні менеджери?
37.Як працюють dict comprehension, list comprehension і set comprehension?
38.Чи можна використовувати кілька декораторів для однієї функції?
39.Чи можна створити декоратор з класу?
40.Які є основні популярні пакети (requests, pytest, etc)?
41.Що таке lambda-функції?
42.Що означає *args, **kwargs та як вони використовуються?
43.Що таке exceptions, <try-except>?
44.Що таке PEP (Python Enhancement Proposal), які з них знаєте (PEP 8, PEP 484)?
45.Напишіть hello-world сервіс, використовуючи один із фреймворків.
46.Які є типи даних?
47.Як використовувати вбудовані колекції (list, set, dictionary)?
48.У чому полягає складність доступу до елементів dict?
49.Як створюється об’єкт в Python, для чого __new__, навіщо __init__?
50.Що знаєте з модуля collections, якими ще built-in модулями користувались?
51.Що таке шаблонізатор та як у ньому виконувати базові операції (об’єднувати ділянки шаблона, виводити дату, виводити дані з серверного боку)?
52.Як Python працює з HTTP-сервером?
53.Що відбувається, коли створюється віртуальне середовище?
54.Що таке логи?
55. Що таке абстрактний клас?
56. Яка різниця між list і tuple, навіщо вони?



Алгоритми:
59.Що таке алгоритми ?
60.Які є базові алгоритми сортування?
61.Що таке Bubble Sort і як це працює?
62.Що таке лінійна складність сортування?



Практичні завдання
1.Спроєктувати клон Instagram. Це сервіс, який зрозумілий практично будь-якому кандидату, навіть якщо в нього немає акаунту. На високому рівні він дуже простий: картинки, описи, коментарі. Тому щось мінімальне зможе описати й джуніор. Якщо кандидат претендує на вищі позиції, можна нескінченно копати вглиб, торкаючись API, тротлінгу запитів, захисту від фроду, побудови фідів користувача тощо.

2.Дано рекурсивне визначення чисел Фібоначчі, треба написати функцію, яка реалізує це визначення.

3.Є база даних із трьох таблиць— стандартна many-to-many схема. Потрібно написати запит, який об’єднує три таблиці й повертає певний результат.

4.Даємо ТЗ якогось корисного мікросервісу (скорочувалка урлів, пошук дублікатів картинок, пошук тегів у текстах) або функції (rate limiter). Просимо кандидата розповісти, як би він його реалізовував. Це дає та можливість дізнатися, що звик використовувати фахівець, наскільки глибоко він знає і розуміє різні технології.

5.Написати якийсь нескладний декоратор (виводить аргументи функції на екран чи, наприклад, вимірює скільки часу виконувалась функція).

6.Junior’у можна запропонувати реалізувати задачку FizzBuzz test.

7. Прості задачі на статистику чи логіку. Наприклад, визначити кут між стрілками годинника, що показує 8:40.
